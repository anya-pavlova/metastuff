if (is.null(names)) {
label <-rownames(x)
}
else {
label <- names
}
boxwidth <- 0.05 * wex
if (!add)
plot.new()
if (!horizontal) {
if (!add) {
plot.window(xlim = xlim, ylim = ylim)
axis(2)
axis(1, at = at, label = label)
}
box()
for (i in 1:n) {
polygon(c(at[i] - height[[i]], rev(at[i] + height[[i]])),
c(base[[i]], rev(base[[i]])), col = col[i], border = border,
lty = lty, lwd = lwd)
if (drawRect) {
lines(at[c(i, i)], c(lower[i], upper[i]), lwd = lwd,
lty = lty)
rect(at[i] - boxwidth/2, q1[i], at[i] + boxwidth/2,
q3[i], col = rectCol)
points(at[i], med[i], pch = pchMed, col = colMed)
}
}
}
else {
if (!add) {
plot.window(xlim = ylim, ylim = xlim)
axis(1)
axis(2, at = at, label = label, las=las)
}
box()
for (i in 1:n) {
polygon(c(base[[i]], rev(base[[i]])), c(at[i] - height[[i]],
rev(at[i] + height[[i]])), col = col[i], border = border,
lty = lty, lwd = lwd)
if (drawRect) {
lines(c(lower[i], upper[i]), at[c(i, i)], lwd = lwd,
lty = lty)
rect(q1[i], at[i] - boxwidth/2, q3[i], at[i] +
boxwidth/2, col = rectCol)
points(med[i], at[i], pch = pchMed, col = colMed)
}
}
}
if (!is.null(main) | !is.null(sub) | !is.null(xlab) | !is.null(ylab)){
title (main = main, sub=sub)}
invisible(list(upper = upper, lower = lower, median = med,
q1 = q1, q3 = q3))
}
###########end
#################make violin plots using 1 or more vectors as input (vioplot function modification)
vio2<-function (x, ..., range = 1.5, h = NULL, ylim = NULL, names = NULL,
horizontal = FALSE, col = "magenta", border = "black", lty = 1,
lwd = 1, rectCol = "black", colMed = "white", pchMed = 19,
at, add = FALSE, wex = 1, drawRect = TRUE, las=0, main=NULL, sub=NULL, ylab=NULL, xlab=NULL)
{
datas <- list(x, ...)
n <- length(datas)
if(length(col)<n && length(col)==1)
{
col<-rep(col,n)
}
if (missing(at))
at <- 1:n
upper <- vector(mode = "numeric", length = n)
lower <- vector(mode = "numeric", length = n)
q1 <- vector(mode = "numeric", length = n)
q3 <- vector(mode = "numeric", length = n)
med <- vector(mode = "numeric", length = n)
base <- vector(mode = "list", length = n)
height <- vector(mode = "list", length = n)
baserange <- c(Inf, -Inf)
args <- list(display = "none")
if (!(is.null(h)))
args <- c(args, h = h)
for (i in 1:n) {
data <- datas[[i]]
data.min <- min(data)
data.max <- max(data)
q1[i] <- quantile(data, 0.25)
q3[i] <- quantile(data, 0.75)
med[i] <- median(data)
iqd <- q3[i] - q1[i]
upper[i] <- min(q3[i] + range * iqd, data.max)
lower[i] <- max(q1[i] - range * iqd, data.min)
est.xlim <- c(min(lower[i], data.min), max(upper[i],
data.max))
smout <- do.call("sm.density", c(list(data, xlim = est.xlim),
args))
hscale <- 0.4/max(smout$estimate) * wex
base[[i]] <- smout$eval.points
height[[i]] <- smout$estimate * hscale
t <- range(base[[i]])
baserange[1] <- min(baserange[1], t[1])
baserange[2] <- max(baserange[2], t[2])
}
if (!add) {
xlim <- if (n == 1)
at + c(-0.5, 0.5)
else range(at) + min(diff(at))/2 * c(-1, 1)
if (is.null(ylim)) {
ylim <- baserange
}
}
if (is.null(names)) {
label <- 1:n
}
else {
label <- names
}
boxwidth <- 0.05 * wex
if (!add)
plot.new()
if (!horizontal) {
if (!add) {
plot.window(xlim = xlim, ylim = ylim)
axis(2)
axis(1, at = at, label = label, las=las)
}
box()
for (i in 1:n) {
polygon(c(at[i] - height[[i]], rev(at[i] + height[[i]])),
c(base[[i]], rev(base[[i]])), col = col[i], border = border,
lty = lty, lwd = lwd)
if (drawRect) {
lines(at[c(i, i)], c(lower[i], upper[i]), lwd = lwd,
lty = lty)
rect(at[i] - boxwidth/2, q1[i], at[i] + boxwidth/2,
q3[i], col = rectCol)
points(at[i], med[i], pch = pchMed, col = colMed)
}
}
}
else {
if (!add) {
plot.window(xlim = ylim, ylim = xlim)
axis(1)
axis(2, at = at, label = label, las=las)
}
box()
for (i in 1:n) {
polygon(c(base[[i]], rev(base[[i]])), c(at[i] - height[[i]],
rev(at[i] + height[[i]])), col = col[i], border = border,
lty = lty, lwd = lwd)
if (drawRect) {
lines(c(lower[i], upper[i]), at[c(i, i)], lwd = lwd,
lty = lty)
rect(q1[i], at[i] - boxwidth/2, q3[i], at[i] +
boxwidth/2, col = rectCol)
points(med[i], at[i], pch = pchMed, col = colMed)
}
}
}
if (!is.null(main) | !is.null(sub) | !is.null(xlab) | !is.null(ylab)){
title (main = main, sub=sub, xlab=xlab, ylab=ylab)}
invisible(list(upper = upper, lower = lower, median = med,
q1 = q1, q3 = q3))
}
###############end
####modification of heatmap.2 in order to enable the use of layout() function
hm3<-function (x, Rowv = TRUE, Colv = if (symm) "Rowv" else TRUE,
distfun = dist, hclustfun = hclust, dendrogram = c("both",
"row", "column", "none"), symm = FALSE, scale = c("none",
"row", "column"), na.rm = TRUE, revC = identical(Colv,
"Rowv"), add.expr, breaks, symbreaks = min(x < 0, na.rm = TRUE) ||
scale != "none", col = "heat.colors", colsep, rowsep,
sepcolor = "white", sepwidth = c(0.05, 0.05), cellnote, notecex = 1,
notecol = "cyan", na.color = par("bg"), trace = c("column",
"row", "both", "none"), tracecol = "cyan", hline = median(breaks),
vline = median(breaks), linecol = tracecol, margins = c(5,
5), ColSideColors, RowSideColors, cexRow = 0.2 + 1/log10(nr),
cexCol = 0.2 + 1/log10(nc), labRow = NULL, labCol = NULL,
key = TRUE, keysize = 1.5, density.info = c("histogram",
"density", "none"), denscol = tracecol, symkey = min(x <
0, na.rm = TRUE) || symbreaks, densadj = 0.25, main = NULL,
xlab = NULL, ylab = NULL, lmat = NULL, lhei = NULL, lwid = NULL,
...)
{
scale01 <- function(x, low = min(x), high = max(x)) {
x <- (x - low)/(high - low)
x
}
retval <- list()
scale <- if (symm && missing(scale))
"none"
else match.arg(scale)
dendrogram <- match.arg(dendrogram)
trace <- match.arg(trace)
density.info <- match.arg(density.info)
if (length(col) == 1 && is.character(col))
col <- get(col, mode = "function")
if (!missing(breaks) && (scale != "none"))
warning("Using scale=\"row\" or scale=\"column\" when breaks are",
"specified can produce unpredictable results.", "Please consider using only one or the other.")
if (is.null(Rowv) || is.na(Rowv))
Rowv <- FALSE
if (is.null(Colv) || is.na(Colv))
Colv <- FALSE
else if (Colv == "Rowv" && !isTRUE(Rowv))
Colv <- FALSE
if (length(di <- dim(x)) != 2 || !is.numeric(x))
stop("`x' must be a numeric matrix")
nr <- di[1]
nc <- di[2]
if (nr <= 1 || nc <= 1)
stop("`x' must have at least 2 rows and 2 columns")
if (!is.numeric(margins) || length(margins) != 2)
stop("`margins' must be a numeric vector of length 2")
if (missing(cellnote))
cellnote <- matrix("", ncol = ncol(x), nrow = nrow(x))
if (!inherits(Rowv, "dendrogram")) {
if (((!isTRUE(Rowv)) || (is.null(Rowv))) && (dendrogram %in%
c("both", "row"))) {
if (is.logical(Colv) && (Colv))
dendrogram <- "column"
else dedrogram <- "none"
warning("Discrepancy: Rowv is FALSE, while dendrogram is `",
dendrogram, "'. Omitting row dendogram.")
}
}
if (!inherits(Colv, "dendrogram")) {
if (((!isTRUE(Colv)) || (is.null(Colv))) && (dendrogram %in%
c("both", "column"))) {
if (is.logical(Rowv) && (Rowv))
dendrogram <- "row"
else dendrogram <- "none"
warning("Discrepancy: Colv is FALSE, while dendrogram is `",
dendrogram, "'. Omitting column dendogram.")
}
}
if (inherits(Rowv, "dendrogram")) {
ddr <- Rowv
rowInd <- order.dendrogram(ddr)
}
else if (is.integer(Rowv)) {
hcr <- hclustfun(distfun(x))
ddr <- as.dendrogram(hcr)
ddr <- reorder(ddr, Rowv)
rowInd <- order.dendrogram(ddr)
if (nr != length(rowInd))
stop("row dendrogram ordering gave index of wrong length")
}
else if (isTRUE(Rowv)) {
Rowv <- rowMeans(x, na.rm = na.rm)
hcr <- hclustfun(distfun(x))
ddr <- as.dendrogram(hcr)
ddr <- reorder(ddr, Rowv)
rowInd <- order.dendrogram(ddr)
if (nr != length(rowInd))
stop("row dendrogram ordering gave index of wrong length")
}
else {
rowInd <- nr:1
}
if (inherits(Colv, "dendrogram")) {
ddc <- Colv
colInd <- order.dendrogram(ddc)
}
else if (identical(Colv, "Rowv")) {
if (nr != nc)
stop("Colv = \"Rowv\" but nrow(x) != ncol(x)")
if (exists("ddr")) {
ddc <- ddr
colInd <- order.dendrogram(ddc)
}
else colInd <- rowInd
}
else if (is.integer(Colv)) {
hcc <- hclustfun(distfun(if (symm)
x
else t(x)))
ddc <- as.dendrogram(hcc)
ddc <- reorder(ddc, Colv)
colInd <- order.dendrogram(ddc)
if (nc != length(colInd))
stop("column dendrogram ordering gave index of wrong length")
}
else if (isTRUE(Colv)) {
Colv <- colMeans(x, na.rm = na.rm)
hcc <- hclustfun(distfun(if (symm)
x
else t(x)))
ddc <- as.dendrogram(hcc)
ddc <- reorder(ddc, Colv)
colInd <- order.dendrogram(ddc)
if (nc != length(colInd))
stop("column dendrogram ordering gave index of wrong length")
}
else {
colInd <- 1:nc
}
retval$rowInd <- rowInd
retval$colInd <- colInd
retval$call <- match.call()
x <- x[rowInd, colInd]
x.unscaled <- x
cellnote <- cellnote[rowInd, colInd]
if (is.null(labRow))
labRow <- if (is.null(rownames(x)))
(1:nr)[rowInd]
else rownames(x)
else labRow <- labRow[rowInd]
if (is.null(labCol))
labCol <- if (is.null(colnames(x)))
(1:nc)[colInd]
else colnames(x)
else labCol <- labCol[colInd]
if (scale == "row") {
retval$rowMeans <- rm <- rowMeans(x, na.rm = na.rm)
x <- sweep(x, 1, rm)
retval$rowSDs <- sx <- apply(x, 1, sd, na.rm = na.rm)
x <- sweep(x, 1, sx, "/")
}
else if (scale == "column") {
retval$colMeans <- rm <- colMeans(x, na.rm = na.rm)
x <- sweep(x, 2, rm)
retval$colSDs <- sx <- apply(x, 2, sd, na.rm = na.rm)
x <- sweep(x, 2, sx, "/")
}
if (missing(breaks) || is.null(breaks) || length(breaks) <
1) {
if (missing(col) || is.function(col))
breaks <- 16
else breaks <- length(col) + 1
}
if (length(breaks) == 1) {
if (!symbreaks)
breaks <- seq(min(x, na.rm = na.rm), max(x, na.rm = na.rm),
length = breaks)
else {
extreme <- max(abs(x), na.rm = TRUE)
breaks <- seq(-extreme, extreme, length = breaks)
}
}
nbr <- length(breaks)
ncol <- length(breaks) - 1
if (class(col) == "function")
col <- col(ncol)
min.breaks <- min(breaks)
max.breaks <- max(breaks)
x[x < min.breaks] <- min.breaks
x[x > max.breaks] <- max.breaks
# if (missing(lhei) || is.null(lhei))
#      lhei <- c(keysize, 4)
#  if (missing(lwid) || is.null(lwid))
#     lwid <- c(keysize, 4)
# if (missing(lmat) || is.null(lmat)) {
#    lmat <- rbind(4:3, 2:1)
#   if (!missing(ColSideColors)) {
#      if (!is.character(ColSideColors) || length(ColSideColors) !=
#         nc)
#        stop("'ColSideColors' must be a character vector of length ncol(x)")
#     lmat <- rbind(lmat[1, ] + 1, c(NA, 1), lmat[2, ] +
#        1)
#   lhei <- c(lhei[1], 0.2, lhei[2])
#  }
#     if (!missing(RowSideColors)) {
#        if (!is.character(RowSideColors) || length(RowSideColors) !=
#           nr)
#          stop("'RowSideColors' must be a character vector of length nrow(x)")
#     lmat <- cbind(lmat[, 1] + 1, c(rep(NA, nrow(lmat) -
#        1), 1), lmat[, 2] + 1)
#   lwid <- c(lwid[1], 0.2, lwid[2])
#  }
#     lmat[is.na(lmat)] <- 0
#}
#if (length(lhei) != nrow(lmat))
#      stop("lhei must have length = nrow(lmat) = ", nrow(lmat))
# if (length(lwid) != ncol(lmat))
#     stop("lwid must have length = ncol(lmat) =", ncol(lmat))
# op <- par(no.readonly = TRUE)
# on.exit(par(op))
# layout(lmat, widths = lwid, heights = lhei, respect = FALSE)
if (!missing(RowSideColors)) {
par(mar = c(margins[1], 0, 0, 0.5))
image(rbind(1:nr), col = RowSideColors[rowInd], axes = FALSE)
}
if (!missing(ColSideColors)) {
par(mar = c(0.5, 0, 0, margins[2]))
image(cbind(1:nc), col = ColSideColors[colInd], axes = FALSE)
}
par(mar = c(margins[1], 0, 0, margins[2]))
x <- t(x)
cellnote <- t(cellnote)
if (revC) {
iy <- nr:1
if (exists("ddr"))
ddr <- rev(ddr)
x <- x[, iy]
cellnote <- cellnote[, iy]
source('~/metagenome/parkinson_diseas/BaseRep/lib/functions.R', echo=TRUE)
source('~/metagenome/parkinson_diseas/BaseRep/lib/functions.R', echo=TRUE)
source('~/metagenome/parkinson_diseas/BaseRep/lib/functions.R', echo=TRUE)
source('~/metagenome/parkinson_diseas/BaseRep/lib/functions.R', echo=TRUE)
source('~/metagenome/parkinson_diseas/BaseRep/lib/functions.R', echo=TRUE)
source('~/metagenome/parkinson_diseas/BaseRep/lib/functions_special.R', echo=TRUE)
source('~/metagenome/parkinson_diseas/BaseRep/lib/functions_special.R', echo=TRUE)
source('~/metagenome/parkinson_diseas/BaseRep/lib/functions_special.R', echo=TRUE)
source('~/metagenome/parkinson_diseas/BaseRep/lib/functions_special2.R', echo=TRUE)
source('~/metagenome/parkinson_diseas/BaseRep/lib/functions_special2.R', echo=TRUE)
source('~/metagenome/parkinson_diseas/BaseRep/lib/loaders.R', echo=TRUE)
source('~/metagenome/parkinson_diseas/BaseRep/lib/loaders.R', echo=TRUE)
source('~/metagenome/parkinson_diseas/BaseRep/lib/loaders.R', echo=TRUE)
load_project <- function()
{
# NON-RARIFIED
fam <- read_qiime_sum_feats("/home/anna/metagenome/parkinson_diseas/BaseRep/data/qiime/MIPT_2015_12_14//otu_table_L5.txt")
g <- read_qiime_sum_feats("/home/anna/metagenome/parkinson_diseas/BaseRep/data/qiime/MIPT_2015_12_14//otu_table_L6.txt")
sp <- read_qiime_sum_feats("/home/anna/metagenome/parkinson_diseas/BaseRep/data/qiime/MIPT_2015_12_14//otu_table_L7.txt")
otu <- read_qiime_otu_table_no_tax("/home/anna/metagenome/parkinson_diseas/BaseRep/data/qiime/MIPT_2015_12_14//otu_table_MOD.txt")
# percent OTU
otup <- 100 * otu / rowSums(otu)
list(sp, g, fam, otu, otup)
}
load_control <- function()
{
# NON-RARIFIED
fam_ctrl <- read_qiime_sum_feats("data/qiime/control_boytsov//otu_table_L5.txt")
g_ctrl <- read_qiime_sum_feats("data/qiime/control_boytsov//otu_table_L6.txt")
sp_ctrl <- read_qiime_sum_feats("data/qiime/control_boytsov//otu_table_L7.txt")
otu_ctrl <- read_qiime_otu_table_no_tax("data/qiime/control_boytsov//otu_table_MOD.txt")
# percent OTU
otup_ctrl <- 100 * otu_ctrl / rowSums(otu_ctrl)
list(sp_ctrl, g_ctrl, fam_ctrl, otu_ctrl, otup_ctrl)
}
fam <- read_qiime_sum_feats("/home/anna/metagenome/parkinson_diseas/BaseRep/data/qiime/MIPT_2015_12_14//otu_table_L5.txt")
source('~/metagenome/parkinson_diseas/BaseRep/src/main.R', echo=TRUE)
rm(list=ls(all=TRUE)); gc()
################################################
# Project Parkinson_diseas - 16S rRNA metagenomes
################################################
# choose your flavor:
cur <- "~/metagenome/Viliuisk/"
#cur <- ""
setwd(cur)
source("lib/functions.R")
source("lib/functions_special.R")
source("lib/functions_special2.R")
source("lib/loaders.R")
# TODO: read register of all samples and prepare some meta-data variables and files
#source("src/.R")
# read data from QIIME
l <- load_project(); sp <- l[[1]]; g <- l[[2]]; fam <- l[[3]]; otu <- l[[4]]; otup <- l[[5]]; rm(l)
l1 <- load_control(); sp_ctrl <- l1[[1]]; g_ctrl <- l1[[2]]; fam_ctrl <- l1[[3]]; otu_ctrl <- l1[[4]]; otup_ctrl <- l1[[5]]; rm(l1)
# select samples, drop some and prepare the tags
source("src/preprocess.R")
# compare with control
source("src/diff_abund.R")
## visualization
source("src/viz.R")
source('~/metagenome/parkinson_diseas/BaseRep/src/diff_abund.R', echo=TRUE)
THRESH_MAX_PVALUE <- 0.05     #0.1
# названия образцов интересующих нас для исследования и названия образцов контроля
#tags_ctrl <- sort(rownames(sp_ctrl))
#tags_vil <- sort(rownames(sp)[grep("^V", rownames(sp))])
#tags_Y89 <- sort(rownames(sp)[grep("^Y8|^Y9", rownames(sp))]) #for Y8 and Y9, yana and Borya
################################
# families
################################
ff <- fam_all[c(tags_vil, tags_ctrl),] #матрица Только из вилюйцев и контроля
manes_farm <- sort(c(rownames(fam))) #вектор имен образцов
manes_farm_ctrl <- sort(c(rownames(fam_ctrl))) # вектор имен контроля
#colnames(ff) <- paste("o_", unlist(data.frame(strsplit(colnames(ff), "o_"))[2,]), sep="")
#ff <- ff[,which(colMaxs(ff) > 0)] # матрица из семейств без колонок в которых только 0
ff <- ff[,which(colMaxs(ff) > 0.1)] #  select top features
w <- wilcox_feats_both_dirs(ff, tags_vil, tags_ctrl, maxpv = THRESH_MAX_PVALUE, pairedt = FALSE)
if(length(w$greater) + length(w$less) > 0)
{
print("Signif. diff. found.")
wf <- convert_taxa_diff_to_table(w)
wf2 <- convert_taxa_diff_to_table_DIV(w)
wf2[,"FDR adj. p-value"] <- round(wf2[,"FDR adj. p-value"], 3)
write.table(wf2, file=paste("out/signif_fam.txt", sep=""), sep=" ", quote=F, row.names = F)
} else {
load_project <- function()
{
# NON-RARIFIED
fam <- read_qiime_sum_feats("/home/anna/metagenome/parkinson_diseas/BaseRep/data/qiime/MIPT_2015_12_14//otu_table_L5.txt")
g <- read_qiime_sum_feats("/home/anna/metagenome/parkinson_diseas/BaseRep/data/qiime/MIPT_2015_12_14//otu_table_L6.txt")
sp <- read_qiime_sum_feats("/home/anna/metagenome/parkinson_diseas/BaseRep/data/qiime/MIPT_2015_12_14//otu_table_L7.txt")
otu <- read_qiime_otu_table_no_tax("/home/anna/metagenome/parkinson_diseas/BaseRep/data/qiime/MIPT_2015_12_14//otu_table_MOD.txt")
# percent OTU
otup <- 100 * otu / rowSums(otu)
list(sp, g, fam, otu, otup)
}
load_control <- function()
read_qiime_sum_feats <- function(filename)
{
f <- t(read.table(filename, header=T, row.names=1, sep="\t"))
rownames(f) <- gsub("X", "", rownames(f))
f <- data.matrix(f)
f <- 100 * f / rowSums(f)
f
}
load_project <- function()
{
# NON-RARIFIED
fam <- read_qiime_sum_feats("/home/anna/metagenome/parkinson_diseas/BaseRep/data/qiime/MIPT_2015_12_14//otu_table_L5.txt")
source('~/metagenome/parkinson_diseas/BaseRep/lib/loaders.R', echo=TRUE)
makeMDS(dd,"/home/anna/metagenome/Yamal/graphs")
dis<-dd
outdir="/home/anna/metagenome/Yamal/graphs"
meta <- data.frame (1:10, colnames = 'meta1')
##########################################################################################
# end of testing
##########################################################################################
### making normal txt-files
